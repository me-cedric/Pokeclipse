// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  output          = "../generated/prisma"
  previewFeatures = ["driverAdapters"]
}

generator zod {
  provider = "zod-prisma-types"
  output   = "../generated/zod"
}

datasource db {
  provider = "postgres"
  // We need to provide a stub value for the db url because prisma will throw a valid postgres url is not provided
  url      = env("DATABASE_URL")
}

//model Note {
//  id        Int      @id @default(autoincrement())
//  text      String
//  createdAt DateTime @default(now())
//  updatedAt DateTime @updatedAt
//}

model User {
  id            String            @id @default(uuid())
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  // extra fields than better auth
  isAdmin       Boolean           @default(false)
  games         UsersOnGames[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum GameState {
  IDLE
  QUESTIONS_1
  QUESTIONS_2
  BLIND_TEST_1
  BLIND_TEST_2
  WHOS_THAT_1
  WHOS_THAT_2
  GEOGUESSR
  FINAL
  COMPLETED
}

model Game {
  id           String    @id @default(uuid())
  name         String
  createdAt    DateTime  @default(now())
  isActive     Boolean   @default(true)
  currentState GameState @default(IDLE)
  players        UsersOnGames[]
}

model UsersOnGames {
  game        Game      @relation(fields: [gameId], references: [id])
  gameId      String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  assignedAt  DateTime @default(now())
  assignedBy  String
  userType UserType

  @@id([gameId, userId])
  @@index([gameId])
  @@index([userId])
}

enum UserType {
  PLAYER
  TEAM_LEADER
  ADMIN
}
